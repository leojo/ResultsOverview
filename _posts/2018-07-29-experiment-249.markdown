---
layout: post
title:  "Experiment 249"
date:   2018-07-29 +0200
categories: result
excerpt_separator: <!-- more -->
---
Testing new learning rate reduction mechanic for loss that has stabilized, min_learning_rate 1e-10, threshold 0.001, count 15, 1200 epochs

Separation losses:

|samples|validation
|16.0274961093|18.2850551794

Loss | L2-loss | KL | Learning rate | Completion | Epochs | Elapsed | Remaining | Speed
0.0063 | 0.0055 | 8.5740 | 1e-08 | 100% | 1200/1200 | 10:06:49 | 00:00 | 30.34s/it<!-- more -->

## **Sample batch**:
_sample 1_:
<audio src="/ResultsOverview/results/0249/sample_1.wav" controls preload></audio>
![sample_1]({{"/results/0249/sample_1.png"| absolute_url}}){:width="1000px"}

_sample 2_:
<audio src="/ResultsOverview/results/0249/sample_2.wav" controls preload></audio>
![sample_2]({{"/results/0249/sample_2.png"| absolute_url}}){:width="1000px"}

_sample 3_:
<audio src="/ResultsOverview/results/0249/sample_3.wav" controls preload></audio>
![sample_3]({{"/results/0249/sample_3.png"| absolute_url}}){:width="1000px"}

_sample 4_:
<audio src="/ResultsOverview/results/0249/sample_4.wav" controls preload></audio>
![sample_4]({{"/results/0249/sample_4.png"| absolute_url}}){:width="1000px"}

_sample 5_:
<audio src="/ResultsOverview/results/0249/sample_5.wav" controls preload></audio>
![sample_5]({{"/results/0249/sample_5.png"| absolute_url}}){:width="1000px"}

_sample 6_:
<audio src="/ResultsOverview/results/0249/sample_6.wav" controls preload></audio>
![sample_6]({{"/results/0249/sample_6.png"| absolute_url}}){:width="1000px"}

_sample 7_:
<audio src="/ResultsOverview/results/0249/sample_7.wav" controls preload></audio>
![sample_7]({{"/results/0249/sample_7.png"| absolute_url}}){:width="1000px"}

_sample 8_:
<audio src="/ResultsOverview/results/0249/sample_8.wav" controls preload></audio>
![sample_8]({{"/results/0249/sample_8.png"| absolute_url}}){:width="1000px"}

_sample 9_:
<audio src="/ResultsOverview/results/0249/sample_9.wav" controls preload></audio>
![sample_9]({{"/results/0249/sample_9.png"| absolute_url}}){:width="1000px"}

_sample 10_:
<audio src="/ResultsOverview/results/0249/sample_10.wav" controls preload></audio>
![sample_10]({{"/results/0249/sample_10.png"| absolute_url}}){:width="1000px"}

## **Validation batch**:
_validation 1_:
<audio src="/ResultsOverview/results/0249/validation_1.wav" controls preload></audio>
![validation_1]({{"/results/0249/validation_1.png"| absolute_url}}){:width="1000px"}

_validation 2_:
<audio src="/ResultsOverview/results/0249/validation_2.wav" controls preload></audio>
![validation_2]({{"/results/0249/validation_2.png"| absolute_url}}){:width="1000px"}

_validation 3_:
<audio src="/ResultsOverview/results/0249/validation_3.wav" controls preload></audio>
![validation_3]({{"/results/0249/validation_3.png"| absolute_url}}){:width="1000px"}

_validation 4_:
<audio src="/ResultsOverview/results/0249/validation_4.wav" controls preload></audio>
![validation_4]({{"/results/0249/validation_4.png"| absolute_url}}){:width="1000px"}

_validation 5_:
<audio src="/ResultsOverview/results/0249/validation_5.wav" controls preload></audio>
![validation_5]({{"/results/0249/validation_5.png"| absolute_url}}){:width="1000px"}

_validation 6_:
<audio src="/ResultsOverview/results/0249/validation_6.wav" controls preload></audio>
![validation_6]({{"/results/0249/validation_6.png"| absolute_url}}){:width="1000px"}

_validation 7_:
<audio src="/ResultsOverview/results/0249/validation_7.wav" controls preload></audio>
![validation_7]({{"/results/0249/validation_7.png"| absolute_url}}){:width="1000px"}

_validation 8_:
<audio src="/ResultsOverview/results/0249/validation_8.wav" controls preload></audio>
![validation_8]({{"/results/0249/validation_8.png"| absolute_url}}){:width="1000px"}

_validation 9_:
<audio src="/ResultsOverview/results/0249/validation_9.wav" controls preload></audio>
![validation_9]({{"/results/0249/validation_9.png"| absolute_url}}){:width="1000px"}

_validation 10_:
<audio src="/ResultsOverview/results/0249/validation_10.wav" controls preload></audio>
![validation_10]({{"/results/0249/validation_10.png"| absolute_url}}){:width="1000px"}


{% highlight python %}
{% raw %}
import os
import numpy as np
import waveUtils


class config(object):

	def __init__(self):
		self.prepare_data()

	# Bsub arguments
	bsub_mainfile = "main.py"
	bsub_processors = 4
	bsub_timeout = "24:00"
	bsub_memory = 32000

	# Epoch and batch config
	batch_size = 128
	latent_dim = 500
	epochs = 1200
	epoch_updates = 100

	# Network structure
	input_s = 32000
	n_ae = 2

	# Model
	load_model = False
	model_path = os.path.join("models", "0230", "model")  # only used if load_model=True

	# Miscellaneous constants
	sample_rate = 8000
	learning_rate = 1e-4
	min_learning_rate = 1e-10
	learning_rate_reduce_threshold = 0.01
	learning_rate_reduction_count = 150
	kl_loss_mult = 1e-4
	kl_extra_mult = 2
	kl_extra_exponent = 2
	keep_prob = 1
	random_noise_stddev = 0
	useLogProba = False
	useMixtureProba = True
	deterministic = False
	reorder_outputs = False
	var_func = "relu"
	data_sources = ["speech","all_music"]
	validation_sources = ["speech","all_music"]
	data = None
	validation_data = None

	# Functions
	def prepare_data(self):
		self.load_data()

	def load_and_prepare_audio(self, source, i):
		duration = self.input_s / float(self.sample_rate)
		data_dir = os.path.join("wav_files", source)
		waves, original_sample_rate = waveUtils.loadAudioFiles(data_dir)
		if i == 0:
			cut_data = waveUtils.extractRandomSegments(waves, num_per_source=48, sample_rate=original_sample_rate, duration=duration)
		elif i == 1:
			cut_data = waveUtils.extractRandomSegments(waves, num_per_source=8, sample_rate=original_sample_rate, duration=duration, max_intensity=0.5)
		elif i == 2:
			cut_data = waveUtils.extractRandomSegments(waves, num_per_source=6, sample_rate=original_sample_rate, duration=duration)
		elif i == 3:
			cut_data = waveUtils.extractRandomSegments(waves, num_per_source=1, sample_rate=original_sample_rate, duration=duration, max_intensity=0.5)
		else:
			cut_data = waveUtils.extractRandomSegments(waves, num_per_source=1, sample_rate=original_sample_rate, duration=duration)
		del waves
		data = waveUtils.reduceQuality(cut_data, self.sample_rate, duration)
		del cut_data
		return data

	def load_data(self):
		if self.data is None:
			self.data = [self.load_and_prepare_audio(source, i) for i, source in enumerate(self.data_sources)]
		if self.validation_data is None:
			self.validation_data = [self.load_and_prepare_audio(source, i+2) for i, source in enumerate(self.validation_sources)]

	def get_training_batch(self, add_noise=True):
		samples = []
		originals = []
		num_sources = len(self.data_sources)
		sample_shape = self.data[0][0].shape
		for _ in range(self.batch_size):
			waves = []
			sample = np.zeros(sample_shape)
			for s in range(num_sources):
				i = np.random.randint(len(self.data[s]))
				wave = self.data[s][i]
				waves.append(wave)
				sample += wave
			sample = sample/num_sources
			samples.append(sample)
			originals.append(waves)

		samples = np.asarray(samples)
		if add_noise and self.random_noise_stddev > 0:
			samples = samples + np.random.normal(0, self.random_noise_stddev, samples.shape)
		originals = np.asarray(originals)
		return samples, originals

	def get_validation_batch(self):
		if self.validation_data is not None:
			samples = []
			originals = []
			num_sources = len(self.validation_sources)
			sample_shape = self.validation_data[0][0].shape
			for _ in range(self.batch_size):
				waves = []
				sample = np.zeros(sample_shape)
				for s in range(num_sources):
					i = np.random.randint(len(self.validation_data[s]))
					wave = self.validation_data[s][i]
					waves.append(wave)
					sample += wave
				sample = sample/num_sources
				samples.append(sample)
				originals.append(waves)

			samples = np.asarray(samples)
			originals = np.asarray(originals)
			return samples, originals
		else:
			return self.get_training_batch(add_noise=False)


	def normalize_batch(self, batch):
		x = batch.astype(np.float32)
		return x / np.max(np.abs(x))

{% endraw %}
{% endhighlight %}
